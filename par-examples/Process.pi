module Process where

import Nat
import BoolLib
import Vec 
import Maybe
import Logic

-- data Channel (id : Nat) (t : Type) : Type where 
--    MkChannel of (id : Nat) (a : t) [id = id]

data Dir : Type where 
    In 
    Out

data Loc (n : Nat) : Type where 
    Here of [n = Zero]
    There of (m : Nat) (Loc m) [n = Succ m]

data InChan (n : Nat) : Type where 
    MkIn of (m : Nat) (Loc m) [n=m]

data OutChan (n : Nat) : Type where 
    MkOut of (m : Nat) (Loc m) [n=m]

data ChanF (n : Nat) : Type where 
    IsIn of (m : Nat) (InChan m) [n=m]
    IsOut of (m : Nat) (OutChan m) [n=m]

data Chan : Type where 
    MkChan of (n : Nat) (ChanF n)

data ChanDef : Type where 
    MkDef of (bound : Nat) (msgTy : Type) (getChs : msgTy -> Maybe Chan)

data SChan : Type where 
   MKSChan of (Dir) (Nat) (msgType : Type) (msgType -> Maybe Chan) 

data State : Type where 
   Live of [n : Nat] (chs : Vec SChan n)
   End

const : [a : Type] -> [b : Type] -> a -> b -> a
const = \[a] [b] x . (\y . x)

-- stIdxMsgTy : [n   : Nat]
--          -> (dir : Dir)
--          -> (chs : Vec SChan n)
--          -> (ch  : Nat)
--          -> Type
   
stIdxMsgTyIn : [n : Nat] -> (chs : Vec SChan n) -> (ch  : Nat) -> Type
stIdxMsgTyIn = \[n] chs ch . case chs of 
                                Nil -> Void 
                                Cons ch chs ->
                                    case ch of 
                                        Zero -> msgType ch 
                                        (Succ ch2) -> stIdxMsgTyTyIn chs ch 


data ProcessM (ty : Type) (st : State) (f : ty -> State) : Type where 
   -- Send of [n : Nat] [chs : Vec SChan n] [m : Nat] (ch : OutChan m) (msg : stIdxMsgTy Out chs m)
    Halt of [n : Nat] [chs : Vec SChan n] [ty=Unit] [st = Live [n] chs] [f=const [State] [ty] End]

return : [t : Type] -> (x : t) -> [st : State] -> ProcessM t st (const [State] [t] st)

bindPEq : [a : Type] -> [n : Nat] -> [chs : Vec SChan n] -> [sf : a -> State]
       -> ProcessM a (Live [n] chs) sf 
       -> [b : Type] -> [s3f : b -> State]
       -> ((x : a) -> ProcessM b (sf x) s3f)

bindP : [n : Nat] -> [chs : Vec SChan n] -> [sf : Unit -> State]
     -> ProcessM Unit (Live [n] chs) sf
     -> [b : Type] -> [s3f : b -> State]
     -> ProcessM b (sf ()) s3f 
     -> ProcessM b (Live [n] chs) s3f